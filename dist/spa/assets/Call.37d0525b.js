import{Q as Y,a as b}from"./QBreadcrumbs.d3b1227d.js";import{Q as F}from"./QPage.0b4c4973.js";import{Q as f}from"./QInput.d8a38a30.js";import{_ as y,aQ as D,o as d,j as h,i as s,t as c,F as p,k as g,u as Q,e as C,w as _,h as E,f as m,g as M,l as w,v as S,r as k}from"./index.d46529e0.js";import{Q as U}from"./QForm.0d7863ef.js";import{Q as O}from"./QDate.1746fdbe.js";import{Q as R}from"./QPopupProxy.607c01c7.js";import{C as V}from"./ClosePopup.3b252226.js";import"./use-key-composition.f4806942.js";import"./use-dark.dbcb9d7c.js";import"./use-split-attrs.c45b8af9.js";import"./uid.42677368.js";import"./focus-manager.b507780d.js";import"./use-form.6837d975.js";import"./use-cache.b0833c75.js";import"./format.3e32b8d9.js";import"./QDialog.5edcdc8b.js";import"./use-prevent-scroll.520d6742.js";import"./scroll.d9c3a4e0.js";import"./use-timeout.5bbf3409.js";import"./focusout.59836918.js";import"./use-transition.5b6985ef.js";import"./QMenu.660b48ee.js";import"./selection.0f7da341.js";const x={props:["selectedYear","selectedMonth","monthName","markedDates","selectedDates"],data(){const e=new Date().getFullYear();return new Date().getMonth(),{years:Array.from({length:21},(t,u)=>e-10+u),months:["January","February","March","April","May","June","July","August","September","October","November","December"],weekDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],calendar:[],formData:{}}},created(){for(const[e,t]of Object.entries(this.selectedDates))this.formData[e]=D(t);console.log("this.formsData: ",this.formData)},methods:{setSelectedDateValue(e){console.log(this.formData);let t={};for(const[u,r]of Object.entries(this.formData))t[u]=new Date(r);console.log("data: ",t),this.$emit("update:selectedDates",{...t})},updateCalendar(){const e=this.selectedYear,t=this.selectedMonth,u=new Date(e,t,1),r=new Date(e,t+1,0);let a=[],l=[];const i=u.getDay();if(i!==0){const n=new Date(e,t,0);for(let v=i-1;v>=0;v--)l.push({date:new Date(n.getFullYear(),n.getMonth(),n.getDate()-v),otherMonth:!0})}for(let n=1;n<=r.getDate();n++)l.length===7&&(a.push(l),l=[]),l.push({date:new Date(e,t,n),otherMonth:!1});const o=7-l.length;for(let n=1;n<=o;n++)l.push({date:new Date(e,t+1,n),otherMonth:!0});a.push(l),this.calendar=a},isMarked(e){return this.markedDates.some(t=>t.getFullYear()===e.getFullYear()&&t.getMonth()===e.getMonth()&&t.getDate()===e.getDate())},isSelected(e){let t="";return{result:Object.entries(this.selectedDates).some(r=>(t=r[0],r[1].getFullYear()===e.getFullYear()&&r[1].getMonth()===e.getMonth()&&r[1].getDate()===e.getDate())),label:t}}},mounted(){this.updateCalendar()}},B={class:"month-year-picker"},N=s("div",{class:"controls"},null,-1),T={class:"calendar"},q={colspan:"7"},P={class:"row items-center justify-end q-gutter-sm"},j={key:1},I={key:2,class:"badge"},L={key:0};function G(e,t,u,r,a,l){return d(),h("div",B,[N,s("table",T,[s("tbody",null,[s("tr",null,[s("th",q,c(u.monthName)+" "+c(u.selectedYear),1)]),s("tr",null,[(d(!0),h(p,null,g(a.weekDays,i=>(d(),h("th",{key:i},c(i),1))),128))]),(d(!0),h(p,null,g(a.calendar,i=>(d(),h("tr",{key:i[0]},[(d(!0),h(p,null,g(i,o=>(d(),h("td",{key:o.date,class:Q({"other-month":o.otherMonth,marked:l.isSelected(o.date).result&&!o.otherMonth})},[l.isSelected(o.date).result&&!o.otherMonth?(d(),C(w,{key:0,round:"",color:"primary"},{default:_(()=>[E(c(o.date.getDate())+" ",1),m(R,{onBeforeShow:e.updateProxy,cover:"","transition-show":"scale","transition-hide":"scale"},{default:_(()=>[m(O,{modelValue:a.formData[`${l.isSelected(o.date).label}`],"onUpdate:modelValue":[n=>a.formData[`${l.isSelected(o.date).label}`]=n,n=>l.setSelectedDateValue(`${l.isSelected(o.date).label}`)]},{default:_(()=>[s("div",P,[M(m(w,{label:"Cancel",color:"primary",flat:""},null,512),[[V]]),M(m(w,{label:"OK",color:"primary",flat:"",onClick:e.save},null,8,["onClick"]),[[V]])])]),_:2},1032,["modelValue","onUpdate:modelValue"])]),_:2},1032,["onBeforeShow"])]),_:2},1024)):(d(),h("div",j,c(o.date.getDate()),1)),l.isSelected(o.date).result&&!o.otherMonth?(d(),h("div",I,c(l.isSelected(o.date).label),1)):S("",!0)],2))),128))]))),128)),a.calendar.length==5?(d(),h("tr",L,[(d(!0),h(p,null,g(a.weekDays,i=>(d(),h("td",{key:i}))),128))])):S("",!0)])])])}var A=y(x,[["render",G]]);const J={components:{MonthView:A},data(){return{selectedDates:{Start:new Date(2025,0,2),Submission:new Date(2025,0,5),Review:new Date(2025,0,10),Selection:new Date(2025,0,15),End:new Date(2025,0,31)},formData:{title:"",date_from:"",submission_date:"",review_date:"",selection_date:"",date_to:""},formError:{title:"",date_from:"",submission_date:"",review_date:"",selection_date:"",date_to:""},calendarMonths:[],markedDates:[new Date(2025,0,5),new Date(2025,0,15)]}},created(){this.getCall()},methods:{getCall(){this.$api.get(`calls/${this.$route.params.call_id}/`).then(e=>{e.status==200&&(this.call=e.data,this.formData=e.data,this.formData.date_range={from:this.formData.date_from,to:this.formData.date_to},console.log(this.call),this.formData={title:this.call.title,date_from:this.call.date_from,submission_date:this.call.submission_date,review_date:this.call.review_date,selection_date:this.call.selection_date,date_to:this.call.date_to},this.validateDates())})},validateDates(){this.formData.date_from&&this.formData.date_to&&new Date(this.formData.date_from)>new Date(this.formData.date_to)&&(this.formError.date_from="Start Date cannot be later than Stop Date.",this.formData.date_to=""),this.formData.date_from&&this.formData.submission_date&&new Date(this.formData.submission_date)<new Date(this.formData.date_from)&&(alert("Submission Date cannot be before Start Date."),this.formData.submission_date=""),this.formData.submission_date&&this.formData.review_date&&new Date(this.formData.review_date)<new Date(this.formData.submission_date)&&(alert("Review Date cannot be before Submission Date."),this.formData.review_date=""),this.formData.review_date&&this.formData.selection_date&&new Date(this.formData.selection_date)<new Date(this.formData.review_date)&&(alert("Selection Date cannot be before Review Date."),this.formData.selection_date=""),this.formData.selection_date&&this.formData.date_to&&new Date(this.formData.date_to)<new Date(this.formData.selection_date)&&(alert("Stop Date cannot be before Selection Date."),this.formData.date_to=""),this.selectedDates={Start:new Date(this.formData.date_from)||null,Submission:new Date(this.formData.submission_date)||null,Review:new Date(this.formData.review_date)||null,Selection:new Date(this.formData.selection_date)||null,End:new Date(this.formData.date_to)||null},console.log(this.formData.date_to),this.generateCalendar()},generateCalendar(){if(!this.formData.date_from||!this.formData.date_to){this.calendarMonths=[];return}const e=new Date(this.formData.date_from),t=new Date(this.formData.date_to),u=[];for(let r=new Date(e.getFullYear(),e.getMonth(),1);r<=t;r.setMonth(r.getMonth()+1)){const a=new Date(r.getFullYear(),r.getMonth()+1,0).getDate(),l=[];for(let i=1;i<=a;i++){const o=new Date(r.getFullYear(),r.getMonth(),i);let n=null;this.formData.submission_date&&o.toISOString().split("T")[0]===this.formData.submission_date?n="Submission":this.formData.review_date&&o.toISOString().split("T")[0]===this.formData.review_date?n="Review":this.formData.selection_date&&o.toISOString().split("T")[0]===this.formData.selection_date&&(n="Selection"),l.push({date:i,event:n})}u.push({name:r.toLocaleString("default",{month:"long"}),month:r.getMonth(),year:r.getFullYear(),days:l})}this.calendarMonths=u},updateSelectedDates(e){this.selectedDates=e,this.formData.date_from=D(e.Start,"-"),this.formData.submission_date=D(e.Submission,"-"),this.formData.review_date=D(e.Review,"-"),this.formData.selection_date=D(e.Selection,"-"),this.formData.date_to=D(e.End,"-"),console.log("final formdata",this.formData),this.generateCalendar()},updateCall(){console.log(this.formData),this.$utilsStore.setLoading(!0),this.$api.put(`calls/${this.$route.params.call_id}/`,this.formData).then(e=>{e.status==200&&(this.call=e.data,this.$router.push("/calls/"),this.$utilsStore.setLoading(!1))})}}},z={class:"row q-gutter-sm"},H={id:"error-alert"},K={id:"error-alert"},W={id:"error-alert"},X={id:"error-alert"},Z={id:"error-alert"},$={id:"error-alert"},ee={class:"row q-gutter-sm"};function te(e,t,u,r,a,l){const i=k("MonthView");return d(),h("div",null,[m(U,{onSubmit:l.updateCall,onReset:e.onReset,class:"q-gutter-md"},{default:_(()=>[s("div",z,[s("div",null,[m(f,{modelValue:a.formData.title,"onUpdate:modelValue":t[0]||(t[0]=o=>a.formData.title=o),label:"Title of your call",outlined:"",required:""},null,8,["modelValue"]),s("div",H,c(a.formError.title),1)]),s("div",null,[m(f,{type:"date",label:"Start Date",outlined:"",modelValue:a.formData.date_from,"onUpdate:modelValue":t[1]||(t[1]=o=>a.formData.date_from=o),onChange:l.validateDates},null,8,["modelValue","onChange"]),s("div",K,c(a.formError.date_from),1)]),s("div",null,[m(f,{label:"Submission Date",type:"date",outlined:"",modelValue:a.formData.submission_date,"onUpdate:modelValue":t[2]||(t[2]=o=>a.formData.submission_date=o),onChange:l.validateDates,required:""},null,8,["modelValue","onChange"]),s("div",W,c(a.formError.title),1)]),s("div",null,[m(f,{label:"Review Date",outlined:"",type:"date",modelValue:a.formData.review_date,"onUpdate:modelValue":t[3]||(t[3]=o=>a.formData.review_date=o),onChange:l.validateDates},null,8,["modelValue","onChange"]),s("div",X,c(a.formError.review_date),1)]),s("div",null,[m(f,{label:"Selection Date",outlined:"",type:"date",modelValue:a.formData.selection_date,"onUpdate:modelValue":t[4]||(t[4]=o=>a.formData.selection_date=o),onChange:l.validateDates},null,8,["modelValue","onChange"]),s("div",Z,c(a.formError.title),1)]),s("div",null,[m(f,{label:"End Date",type:"date",outlined:"",modelValue:a.formData.date_to,"onUpdate:modelValue":t[5]||(t[5]=o=>a.formData.date_to=o),onChange:l.validateDates},null,8,["modelValue","onChange"]),s("div",$,c(a.formError.date_to),1)]),m(w,{color:"primary",label:"Update",onClick:l.updateCall},null,8,["onClick"])])]),_:1},8,["onSubmit","onReset"]),s("div",ee,[(d(!0),h(p,null,g(a.calendarMonths,o=>(d(),C(i,{key:o.name,selectedYear:o.year,selectedMonth:o.month,monthName:o.name,markedDates:a.markedDates,selectedDates:a.selectedDates,"onUpdate:selectedDates":t[6]||(t[6]=n=>l.updateSelectedDates(n))},null,8,["selectedYear","selectedMonth","monthName","markedDates","selectedDates"]))),128))])])}var ae=y(J,[["render",te]]);const oe={name:"UpdateCall",components:{CalendarGrid2:ae},data(){return{loading:!1,showDialog:!1,call:null}},computed:{},created(){this.getCall()},methods:{getCall(){this.$api.get(`calls/${this.$route.params.call_id}/`).then(e=>{e.status==200&&(this.call=e.data)})}},watch:{showPopup(e,t){this.showDialog=e},showDialog(e,t){this.$emit("showPopupChanged",e)}}},le={class:"q-my-md"};function re(e,t,u,r,a,l){const i=k("CalendarGrid2");return a.call?(d(),C(F,{key:0,padding:""},{default:_(()=>[s("div",le,[m(Y,null,{default:_(()=>[m(b,{icon:"home",to:"/",label:"Home"}),m(b,{label:"Calls",to:"/calls",icon:"campaign"}),m(b,{label:a.call.title,icon:"campaign"},null,8,["label"])]),_:1})]),m(i)]),_:1})):S("",!0)}var Qe=y(oe,[["render",re]]);export{Qe as default};
